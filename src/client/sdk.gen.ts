// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-axios';
import type { ScrapeAndExtractFromUrlData, ScrapeAndExtractFromUrlResponse, ScrapeAndExtractFromUrlError, CancelCrawlData, CancelCrawlResponse, CancelCrawlError, GetCrawlStatusData, GetCrawlStatusResponse, GetCrawlStatusError, CrawlUrlsData, CrawlUrlsResponse, CrawlUrlsError, MapUrlsData, MapUrlsResponse, MapUrlsError } from './types.gen';
import { zScrapeAndExtractFromUrlResponse, zCancelCrawlResponse, zGetCrawlStatusResponse, zCrawlUrlsResponse, zMapUrlsResponse } from './zod.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Scrape a single URL and optionally extract information using an LLM
 */
export const scrapeAndExtractFromUrl = <ThrowOnError extends boolean = false>(options: Options<ScrapeAndExtractFromUrlData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ScrapeAndExtractFromUrlResponse, ScrapeAndExtractFromUrlError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        responseValidator: async (data) => {
            return await zScrapeAndExtractFromUrlResponse.parseAsync(data);
        },
        url: '/scrape',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Cancel a crawl job
 */
export const cancelCrawl = <ThrowOnError extends boolean = false>(options: Options<CancelCrawlData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<CancelCrawlResponse, CancelCrawlError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        responseValidator: async (data) => {
            return await zCancelCrawlResponse.parseAsync(data);
        },
        url: '/crawl/{id}',
        ...options
    });
};

/**
 * Get the status of a crawl job
 */
export const getCrawlStatus = <ThrowOnError extends boolean = false>(options: Options<GetCrawlStatusData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetCrawlStatusResponse, GetCrawlStatusError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        responseValidator: async (data) => {
            return await zGetCrawlStatusResponse.parseAsync(data);
        },
        url: '/crawl/{id}',
        ...options
    });
};

/**
 * Crawl multiple URLs based on options
 */
export const crawlUrls = <ThrowOnError extends boolean = false>(options: Options<CrawlUrlsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CrawlUrlsResponse, CrawlUrlsError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        responseValidator: async (data) => {
            return await zCrawlUrlsResponse.parseAsync(data);
        },
        url: '/crawl',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Map multiple URLs based on options
 */
export const mapUrls = <ThrowOnError extends boolean = false>(options: Options<MapUrlsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MapUrlsResponse, MapUrlsError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        responseValidator: async (data) => {
            return await zMapUrlsResponse.parseAsync(data);
        },
        url: '/map',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};